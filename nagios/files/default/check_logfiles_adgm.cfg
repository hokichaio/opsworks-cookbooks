# common variables for the search script
my $crit_flag = 0; # init value crit_flag, to print log lines
my $flag = 0; # init value for flag, to add line
my $point_flag = 0; # init value for point_flag to count send point error
my @crit_logs = (); # an array to collect log's lines

$options='report=long,maxlength=16384,supersmartpostscript';
$MACROS = {
  APLOGDIR => '/var/app/adgm/logs'
}; # define app log directory
@searches = ({#first search start

  # unique descriptor for this search, appears in the output
  tag => 'AdgameApiError',

  # log files are rotated, loglogdate8 means log-yyyymmdd
  rotation => 'loglogdate8',

  # the name of log file to scan
  logfile => '$APLOGDIR$/appl.log',
  
  # a regular expression to trigger a critical error, i.e. every line
  criticalpatterns => '.*', 

  #options:
  #script: script will be executed,
  #noprotocal: not write to protocol file
  #supersmartscript: exitcode and output of the script should replace the triggering match
  options => 'script,noprotocol', 

  #define script
  script => sub {
    my $C_AFTER_LINES = 3;

    # $ENV{CHECK_LOGFILES_SERVICEOUTPUT}: content of the triggering line
    my $line = $ENV{CHECK_LOGFILES_SERVICEOUTPUT};

    # increase $flag if $flat is not 0
    $flag++ if $flag;

    # triggering line contains (ERORR or FATAL) and does not contain InvalidAd
    if ( ($line =~ /(FATAL|ERROR)/) && ($line !~ /SendPointException/) && ($line !~ /USER ERROR/) && ($line !~ /CONNECTION ERROR/) && ($line !~ /TYPE ERROR/) && ($line !~ /UNKNOWN ERROR/) && ($line !~ /_ERROR/) && ($line !~ /MySQLIntegrityConstraintViolationException: Duplicate entry/)) {
      # CRITICAL
      $crit_flag++;
      $flag = 1;
      push(@crit_logs,$line); # add this line to array

    # to reset $flag when $flag = 0 or $flag > a number of lines
    } elsif (!$flag || $flag > $C_AFTER_LINES+1) {
      # reset flag to stop adding more lines
      $flag = 0;
    } else {
      push(@crit_logs,$line); # add this line to array
    }
  }
}, #first search end
{ #second search start
  tag => 'SendPointError',
  rotation => 'loglogdate8',
  logfile => '$APLOGDIR$/appl.log',
  criticalpatterns => '.*',
  options => 'script,noprotocol',
  script => sub {
    my $C_AFTER_LINES = 3;
    my $C_POINT_ERRORS = 10;
    my $line = $ENV{CHECK_LOGFILES_SERVICEOUTPUT};

    $flag++ if $flag;

    # triggering contains ERROR and InvalidAd
    if ( ($line =~ /ERROR/) && ($line =~ /SendPointException/)) {
      $point_flag++; # increase point_flag
      # if meet the error for point many time then change $crit_flag
      $crit_flag++ if $point_flag > $C_POINT_ERRORS; 
      $flag = 1;
      push(@crit_logs,"SEND_POINT_ERROR, ".$line); # add this line to array
    } elsif (!$flag || $flag > $C_AFTER_LINES+1) {
      # reset flag to stop adding more lines
      $flag = 0;
    } else {
      push(@crit_logs,$line); # add this line to array
    }
  }
});

# this srcip run after search script and return search result
# search result:
# OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3
$postscript = sub {
  if ($crit_flag) {
    print join("\n",@crit_logs)."\n";
    return 2;
  } else {

    # print check_logfile plugin's performance data
    # e.g. PING ok - Packet loss = 0%, RTA = 0.80 ms
    print $ENV{CHECK_LOGFILES_SERVICEPERFDATA};
    return 0;
  }
};